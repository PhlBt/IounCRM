<template>
  <v-row align="center" justify="center">
    <v-col cols="12" sm="8" md="3">
      <v-card class="elevation-12">
        <v-toolbar
          class="d-flex justify-center"
          color="primary"
          dark
          dense
          flat
        >
          <v-toolbar-title>
            <v-icon class="mr-3">mdi-account-plus-outline</v-icon>
            Регистрация
          </v-toolbar-title>
        </v-toolbar>
        <v-card-text>
          <v-form
            ref="registration"
            class="flex-wrap"
            @keyup.enter="addUserInfo()"
          >
            <v-row>
              <v-col cols="12" md="6">
                <v-text-field
                  v-model="name"
                  id="name"
                  label="Имя"
                  name="name"
                  :rules="rules.name"
                  prepend-icon="mdi-account-settings-outline"
                  type="name"
                ></v-text-field>
              </v-col>
              <v-col cols="12" md="6">
                <v-text-field
                  v-model="project"
                  id="project"
                  label="Проект"
                  name="project"
                  :rules="rules.project"
                  prepend-icon="mdi-file-document-edit-outline"
                  type="project"
                ></v-text-field>
              </v-col>
            </v-row>
          </v-form>
        </v-card-text>
        <v-card-actions class="d-flex justify-center mb-3">
          <v-btn
            class="w-50"
            id="login-btn"
            color="primary"
            @click="addUserInfo()"
          >
            Зарегистрироваться
          </v-btn>
        </v-card-actions>
      </v-card>
    </v-col>
  </v-row>
</template>

<script>
import VueRecaptcha from "vue-recaptcha";

export default {
  layout: "thin",
  name: "registration",
  components: { VueRecaptcha },
  data: function () {
    return {
      name: "",
      project: "",
      rules: {
        name: [(v) => !!v || "Имя необходимо заполнить"],
        project: [
          (v) =>
            !!v || "Проект необходимо заполнить, например домен вашего сайта",
        ],
      },
    };
  },
  computed: {
    user: function () {
      return this.$store.getters.user;
    },
    isRegistered: function () {
      return this.$store.getters.isRegistered;
    },
  },
  watch: {
    isRegistered: function () {
      if (this.isRegistered) {
        this.$router.push("/");
      }
    },
  },
  methods: {
    addUserInfo: function () {
      if (!this.$refs["registration"].validate()) return;

      this.$fire.firestore.collection("users").doc(this.user.uid).set({
        uid: this.user.uid,
        phone: this.user.phoneNumber,
        name: this.name,
        project: this.project,
      });

      this.$store.commit('setNeedUpdate', true)
      this.$fire.auth.currentUser.getIdToken(true)
    },
  },
};
</script>

<style>
input:-webkit-autofill,
input:-webkit-autofill:hover,
input:-webkit-autofill:focus input:-webkit-autofill,
textarea:-webkit-autofill,
textarea:-webkit-autofill:hover textarea:-webkit-autofill:focus,
select:-webkit-autofill,
select:-webkit-autofill:hover,
select:-webkit-autofill:focus {
  border: 0;
  transition: background-color 5000s ease-in-out 0s;
  background: -webkit-linear-gradient(
    top,
    rgba(255, 255, 255, 0) 0%,
    rgba(0, 174, 255, 0.04) 50%,
    rgba(255, 255, 255, 0) 51%,
    rgba(0, 174, 255, 0.03) 100%
  );
  color: #ffffff !important;
  -webkit-text-fill-color: rgb(255, 255, 255);
}
</style>